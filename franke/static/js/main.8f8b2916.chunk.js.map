{"version":3,"sources":["components/MediaViewer/index.js","components/FileViewer/index.js","App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["MediaViewer","url","playing","controls","width","height","pdfjs","GlobalWorkerOptions","workerSrc","version","FileViewer","state","numPages","pageNumber","onDocumentLoadSuccess","setState","goToPrevPage","goToNextPage","this","onClick","style","file","onLoadSuccess","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"2MAkBeA,MAff,WACE,OACE,kBAAC,IAAD,CAGIC,IAAI,gDACJC,SAAS,EACTC,UAAU,EACVC,MAAM,OACNC,OAAO,U,wCCVfC,QAAMC,oBAAoBC,UAA1B,kDAAiFF,QAAMG,QAAvF,kB,IA2CeC,E,4MAxCbC,MAAQ,CAAEC,SAAU,KAAMC,WAAY,G,EAEtCC,sBAAwB,YAAmB,IAAhBF,EAAe,EAAfA,SACzB,EAAKG,SAAS,CAAEH,c,EAGlBI,aAAe,kBACb,EAAKD,UAAS,SAAAJ,GAAK,MAAK,CAAEE,WAAYF,EAAME,WAAa,O,EAC3DI,aAAe,kBACb,EAAKF,UAAS,SAAAJ,GAAK,MAAK,CAAEE,WAAYF,EAAME,WAAa,O,uDAEjD,IAAD,EAC0BK,KAAKP,MAA9BE,EADD,EACCA,WAAYD,EADb,EACaA,SAEpB,OACE,6BACE,6BACE,4BAAQO,QAASD,KAAKF,cAAtB,QACA,4BAAQG,QAASD,KAAKD,cAAtB,SAGF,yBAAKG,MAAO,CAAEhB,MAAO,MACnB,kBAAC,WAAD,CAGEiB,KAAK,kFACLC,cAAeJ,KAAKJ,uBAEpB,kBAAC,OAAD,CAAMD,WAAYA,EAAYT,MAAO,QAIzC,mCACQS,EADR,OACwBD,Q,GAlCPW,aCUVC,MAVf,WACE,OACE,oCAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYpB,MAAM,OAAOC,OAAO,YCGlBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,iBEzI5B,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I","file":"static/js/main.8f8b2916.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactPlayer from 'react-player';\r\n\r\nfunction MediaViewer() {\r\n  return (\r\n    <ReactPlayer \r\n        // url='https://storage.googleapis.com/media-session/elephants-dream/the-wires.mp3' \r\n        // url='//www.youtube.com/watch?v=ysz5S6PUM-U'\r\n        url='https://yabeshan.github.io/franke/canada1.mp3'\r\n        playing={false}\r\n        controls={true}\r\n        width='100%'\r\n        height='30px'\r\n        />    \r\n  );\r\n}\r\n\r\n\r\nexport default MediaViewer;\r\n","import React, { Component } from \"react\";\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nclass FileViewer extends Component {\r\n  state = { numPages: null, pageNumber: 1 };\r\n\r\n  onDocumentLoadSuccess = ({ numPages }) => {\r\n    this.setState({ numPages });\r\n  };\r\n\r\n  goToPrevPage = () =>\r\n    this.setState(state => ({ pageNumber: state.pageNumber - 1 }));\r\n  goToNextPage = () =>\r\n    this.setState(state => ({ pageNumber: state.pageNumber + 1 }));\r\n\r\n  render() {\r\n    const { pageNumber, numPages } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <nav>\r\n          <button onClick={this.goToPrevPage}>Prev</button>\r\n          <button onClick={this.goToNextPage}>Next</button>\r\n        </nav>\r\n\r\n        <div style={{ width: 600 }}>\r\n          <Document\r\n            // file=\"https://projects.wojtekmaj.pl/react-pdf/static/sample.pdf\"\r\n            // file=\"https://cors-anywhere.herokuapp.com/http://www.africau.edu/images/default/sample.pdf\"\r\n            file=\"https://cors-anywhere.herokuapp.com/http://yabeshan.github.io/franke/canada.pdf\"\r\n            onLoadSuccess={this.onDocumentLoadSuccess}\r\n          >\r\n            <Page pageNumber={pageNumber} width={600} />\r\n          </Document>\r\n        </div>\r\n\r\n        <p>\r\n          Page {pageNumber} of {numPages}\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileViewer;","import React from 'react';\nimport MediaViewer from './components/MediaViewer';\nimport FileViewer from './components/FileViewer';\n\nfunction App() {\n  return (\n    <div>\n      init\n      <MediaViewer />\n      <FileViewer width=\"100%\" height=\"200px\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;"],"sourceRoot":""}